import { LeaderboardLoading } from "@/components"
import { NextComponentType } from "next"

import dynamic from "next/dynamic"

import Head from "next/head"
import router, { useRouter } from "next/router"

import { useEffect, useState } from "react"
import Leaderboard from "./valorant"
import Posts from "./Posts"

export interface ILeaderboard {
  IsAnonymized: boolean
  IsBanned: boolean
  PlayerCardID: string
  TitleID: string
  competitiveTier: number
  gameName: string
  leaderboardRank: number
  numberOfWins: number
  puuid: string
  rankedRating: number
  tagLine: string
}
export interface ILeaderboardData {
  players: ILeaderboard[]
}
const regions = ["latam", "na", "eu", "ap", "kr"]

export default function Home() {
  const [data, setData] = useState<ILeaderboardData>()
  const [currentPage, setCurrentPage] = useState("valorant")
  const [region, setRegion] = useState("latam")
  const [initialLoading, setInitialLoading] = useState(true)

  // useEffect(() => {
  //   async function fetchData() {
  //     const result = await fetch(
  //       `https://api.henrikdev.xyz/valorant/v2/leaderboard/${region}`,
  //     )
  //     const jsonResult: ILeaderboardData = await result.json()
  //     setData(jsonResult)
  //     setInitialLoading(false)
  //   }
  //   fetchData()
  // }, [region])
  // console.log(initialLoading)

  // Change the page based on the dropdown menu selection

  return (
    <>
      <Head>
        <title>Leaderboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container mx-auto p-4 min-h-[100px]">
        <div className="w-full md:w-1/2 lg:w-1/3 mx-auto">
          <label
            htmlFor="region"
            className="block text-sm font-medium text-white"
          >
            Select Region
          </label>
          <select
            id="region"
            name="region"
            value={region}
            onChange={(e) => setRegion(e.target.value)}
            className="mt-1 text-black block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            {regions.map((region) => (
              <option key={region} value={region}>
                {region.toUpperCase()}
              </option>
            ))}
          </select>
        </div>
        <select
          id="page"
          name="page"
          value={currentPage}
          onChange={(e) => {
            setCurrentPage(e.target.value)
            router.push(`/${e.target.value}`)
          }}
        >
          <option value="valorant">Valorant Leaderboard</option>
          <option value="posts">Posts</option>
        </select>
      </div>
      {initialLoading ? (
        <LeaderboardLoading />
      ) : (
        data && (
          <>
            {currentPage === "valorant" ? (
              <Leaderboard
                isLoading={initialLoading}
                region={region}
                players={data.players}
              />
            ) : (
              <Posts />
            )}
          </>
        )
      )}
    </>
  )
}
